# Actividad 8: Selección Aleatoria Ponderada por Rangos

import numpy as np
import bisect as b

def repair_func(poblation, capacity, weights):
    for i in range(poblation.shape[0]):
        
        knapsack_full = True if np.dot(weights, poblation[i]) > capacity else False
            
        while knapsack_full == True:
            for j in range(poblation.shape[1]):
                poblation[i, j] = 0
                knapsack_full = False if np.dot(weights, poblation[i]) < capacity else True
                    
        while knapsack_full == False:
            for j in range(poblation.shape[1]):
                poblation[i, j] = 1
                if np.dot(weights, poblation[i]) > capacity:
                    poblation[i, j] = 0
                    knapsack_full = True

def selection_weighted_random(poblation, x_rate):
    max = int((poblation.shape[0]*x_rate))
    random_selection = np.random.rand(max)
    print("Aleatorio: ", random_selection)
    values = np.array([i for i in range(1,max+1)])
    sum_total = np.sum(values)
    sum_pi = ((max - (values) + 1)/sum_total)
    for i in range(1, sum_pi.shape[0]):
        sum_pi[i] += sum_pi[i-1]
    print("SumPi: ", sum_pi)
    father = []
    mother = []
    for i in range(sum_pi.shape[0]):
        x = b.bisect(sum_pi, random_selection[i])
        print("x: ", x)
        if (i % 2 == 1):
            father.append(x)
        else:
            mother.append(x)
    return father, mother

poblation = np.random.randint(2, size=(10, 10)) # Cromosomas, objetos = Size
weights = np.random.uniform(1, 10, size=(10))
capacity = np.sum(weights)/2
value = np.random.uniform(1, 100, size=(10))
X_rate = 0.5
repair_func(poblation, capacity, weights)
print("Población Inicial: \n", poblation)
father_id, mother_id = selection_weighted_random(poblation, X_rate)
print("Padres: \n", poblation[father_id])
print("Madres: \n", poblation[mother_id])